import { inject } from '@angular/core';
import { VIEW_RENDER_REGISTRY } from './view.render.registry';
import { VIEW_CONTEXT } from './view.aggregation.context';
import { VIEW_ACTIVE_REGISTRY } from './view.active.registry';
export class ViewCommandBase {
    constructor() {
        this._context = inject(VIEW_CONTEXT);
        this._viewRenderRegistry = inject(VIEW_RENDER_REGISTRY);
        this._viewActiveRegistry = inject(VIEW_ACTIVE_REGISTRY);
        this._viewActiveChecked = false;
    }
    /**
     * Defines this method as get the context type for type check
     * @returns Context Type
     */
    getContextAs() {
        const context = this._context;
        return context;
    }
    viewActiveChecked(viewActiveCheck = true) {
        this._viewActiveChecked = viewActiveCheck;
    }
    executeCommand(data) {
        const viewName = this._viewRenderRegistry.viewName();
        if (this._viewActiveChecked) {
            if (viewName == this._viewActiveRegistry.getActiveView()) {
                console.log(`Execute command in View=[${viewName}] with MeViewActive=${this._viewActiveChecked}`);
                this.execute(data);
            }
        }
        else {
            this.execute(data);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5jb21tYW5kLmJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy92aWV3L2Jhc2Uvc3JjL2xpYi92aWV3LmNvbW1hbmQuYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU5RCxNQUFNLE9BQWdCLGVBQWU7SUFBckM7UUFDcUIsYUFBUSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoQyx3QkFBbUIsR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUNuRCx3QkFBbUIsR0FBRyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM5RCx1QkFBa0IsR0FBRyxLQUFLLENBQUM7SUFrQ3JDLENBQUM7SUFoQ0M7OztPQUdHO0lBQ0ksWUFBWTtRQUNqQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBbUIsQ0FBQztRQUN6QyxPQUFPLE9BQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLGtCQUEyQixJQUFJO1FBQ3RELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxlQUFlLENBQUM7SUFDNUMsQ0FBQztJQVNNLGNBQWMsQ0FBQyxJQUFlO1FBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVyRCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzVCLElBQUksUUFBUSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO2dCQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixRQUFRLHVCQUF1QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JCLENBQUM7UUFDSCxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld0NvbnRleHQgfSBmcm9tICcuL3ZpZXcuY29udGV4dCc7XG5pbXBvcnQgeyBWSUVXX1JFTkRFUl9SRUdJU1RSWSB9IGZyb20gJy4vdmlldy5yZW5kZXIucmVnaXN0cnknO1xuaW1wb3J0IHsgVmlld0NvbW1hbmQgfSBmcm9tICcuL3ZpZXcuY29tbWFuZCc7XG5pbXBvcnQgeyBWSUVXX0NPTlRFWFQgfSBmcm9tICcuL3ZpZXcuYWdncmVnYXRpb24uY29udGV4dCc7XG5pbXBvcnQgeyBWaWV3RGF0YSB9IGZyb20gJy4vdmlldy50eXBlJztcbmltcG9ydCB7IFZJRVdfQUNUSVZFX1JFR0lTVFJZIH0gZnJvbSAnLi92aWV3LmFjdGl2ZS5yZWdpc3RyeSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3Q29tbWFuZEJhc2UgaW1wbGVtZW50cyBWaWV3Q29tbWFuZCB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfY29udGV4dCA9IGluamVjdChWSUVXX0NPTlRFWFQpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3ZpZXdSZW5kZXJSZWdpc3RyeSA9IGluamVjdChWSUVXX1JFTkRFUl9SRUdJU1RSWSk7XG4gIHByb3RlY3RlZCByZWFkb25seSBfdmlld0FjdGl2ZVJlZ2lzdHJ5ID0gaW5qZWN0KFZJRVdfQUNUSVZFX1JFR0lTVFJZKTtcbiAgcHJpdmF0ZSBfdmlld0FjdGl2ZUNoZWNrZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGlzIG1ldGhvZCBhcyBnZXQgdGhlIGNvbnRleHQgdHlwZSBmb3IgdHlwZSBjaGVja1xuICAgKiBAcmV0dXJucyBDb250ZXh0IFR5cGVcbiAgICovXG4gIHB1YmxpYyBnZXRDb250ZXh0QXM8Q1R5cGUgZXh0ZW5kcyBWaWV3Q29udGV4dD4oKTogQ1R5cGUge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLl9jb250ZXh0IGFzIHVua25vd247XG4gICAgcmV0dXJuIGNvbnRleHQgYXMgQ1R5cGU7XG4gIH1cblxuICBwdWJsaWMgdmlld0FjdGl2ZUNoZWNrZWQodmlld0FjdGl2ZUNoZWNrOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHRoaXMuX3ZpZXdBY3RpdmVDaGVja2VkID0gdmlld0FjdGl2ZUNoZWNrO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIGNvbW1hbmQgd2l0aCBkYXRhIGFuZCB2aWV3TmFtZVxuICAgKiBAcGFyYW0gZGF0YSAtIGRhdGEgdG8gcGFzcyB0byB0aGUgY29tbWFuZFxuICAgKiBAcGFyYW0gdmlld05hbWUgLSB2aWV3IG5hbWUgdG8gZXhlY3V0ZSB0aGUgY29tbWFuZCBlLmcgJ2h1YicsICdjb250YWN0JywgJ3Byb2R1Y3RfbGlzdCdcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBleGVjdXRlKGRhdGE/OiBWaWV3RGF0YSwgdmlld05hbWU/OiBzdHJpbmcpOiB2b2lkO1xuXG4gIHB1YmxpYyBleGVjdXRlQ29tbWFuZChkYXRhPzogVmlld0RhdGEpIHtcbiAgICBjb25zdCB2aWV3TmFtZSA9IHRoaXMuX3ZpZXdSZW5kZXJSZWdpc3RyeS52aWV3TmFtZSgpO1xuXG4gICAgaWYgKHRoaXMuX3ZpZXdBY3RpdmVDaGVja2VkKSB7XG4gICAgICBpZiAodmlld05hbWUgPT0gdGhpcy5fdmlld0FjdGl2ZVJlZ2lzdHJ5LmdldEFjdGl2ZVZpZXcoKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXhlY3V0ZSBjb21tYW5kIGluIFZpZXc9WyR7dmlld05hbWV9XSB3aXRoIE1lVmlld0FjdGl2ZT0ke3RoaXMuX3ZpZXdBY3RpdmVDaGVja2VkfWApO1xuICAgICAgICB0aGlzLmV4ZWN1dGUoZGF0YSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXhlY3V0ZShkYXRhKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==