{"version":3,"file":"infrastructure-base.mjs","sources":["../../../../projects/infrastructure/base/src/lib/storages/local.storage.ts","../../../../projects/infrastructure/base/src/lib/storages/session.storage.ts","../../../../projects/infrastructure/base/src/lib/orbitmail_portal.context.ts","../../../../projects/infrastructure/base/src/lib/readable.repository.ts","../../../../projects/infrastructure/base/src/lib/repositories/weather.readable.repository.ts","../../../../projects/infrastructure/base/src/lib/repositories/vrto.readable.repository.ts","../../../../projects/infrastructure/base/src/lib/repositories/vato.readable.repository.ts","../../../../projects/infrastructure/base/src/lib/orbitmail_portal.firebase.context.ts","../../../../projects/infrastructure/base/src/public-api.ts","../../../../projects/infrastructure/base/src/infrastructure-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BrowserStorageBase } from './browser.storage.base';\n\n@Injectable({ providedIn: 'root' })\nexport class LocalStorage implements BrowserStorageBase {\n  public get(key: string) {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  }\n  public set(key: string, value: string): void {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n  public remove(key: string): void {\n    localStorage.removeItem(key);\n  }\n  public clear(): void {\n    localStorage.clear();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BrowserStorageBase } from './browser.storage.base';\n\n@Injectable({ providedIn: 'root' })\nexport class SessionStorage implements BrowserStorageBase {\n  public get(key: string) {\n    const item = sessionStorage.getItem(key);\n    return item ? JSON.parse(item) : null;\n  }\n  public set(key: string, value: string): void {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  }\n  public remove(key: string): void {\n    sessionStorage.removeItem(key);\n  }\n  public clear(): void {\n    sessionStorage.clear();\n  }\n}\n","import { Injectable, InjectionToken } from '@angular/core';\nimport { Context } from './context';\nimport { BrowserStorageBase, LocalStorage } from './storages';\n\n/**\n * Defines the ORBITMAIL_PORTAL Context which keep end point (location) to connect to backend service\n * The endpoint should be get from Environment\n */\n@Injectable({ providedIn: 'root' })\nexport class ORBITMAIL_PORTALContext implements Context {\n  private _endPoint: string = '';\n\n  /**\n   * Defines get Endpoint\n   */\n  public get endPoint() {\n    return this._endPoint;\n  }\n\n  /**\n   * Defines set Endpoint\n   */\n  public set endPoint(endPoint: string) {\n    this._endPoint = endPoint;\n  }\n}\n\nexport const BROWSER_STORAGE = new InjectionToken<BrowserStorageBase>(\n  'BROWSER_STORAGE',\n  {\n    providedIn: 'root',\n    factory: () => new LocalStorage(),\n  }\n);\n","import { HttpClient } from '@angular/common/http';\nimport { DestroyRef, inject } from '@angular/core';\nimport { IReadableRepository } from '@core/base';\nimport { Observable } from 'rxjs';\nimport { ORBITMAIL_PORTALContext } from './orbitmail_portal.context';\n\nexport class ReadableRepository implements IReadableRepository {\n  protected _context = inject(ORBITMAIL_PORTALContext);\n  protected httpClient = inject(HttpClient);\n  protected destroyRef = inject(DestroyRef);\n\n  protected readonly defaultOptions = {\n    headers: {\n      'Time-Zone': Intl.DateTimeFormat().resolvedOptions().timeZone,\n    },\n  };\n\n  private mergeOptions(customOptions?: {}): {} {\n    return { ...this.defaultOptions, ...customOptions };\n  }\n\n  findAll<T>(endPoint: string, options?: {}): Observable<T> {\n    return this.httpClient.get<T>(endPoint, this.mergeOptions(options));\n  }\n\n  findById<T>(\n    endPoint: string,\n    id: string,\n    options?: {} | undefined\n  ): Observable<T> {\n    return this.httpClient.get<T>(endPoint, this.mergeOptions(options));\n  }\n\n  findInAll<T>(endPoint: string, body: T, options?: {}): Observable<T> {\n    return this.httpClient.post<T>(endPoint, body, this.mergeOptions(options));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { GetAllWeatherResponse } from '@application/messages';\nimport { ResponseMapper } from '@core/base';\nimport { flatMap, map, Observable } from 'rxjs';\nimport { ReadableRepository } from '../readable.repository';\n\n@Injectable({ providedIn: 'root' })\nexport class WeatherReadableRepository extends ReadableRepository {\n  public getAll(): Observable<GetAllWeatherResponse[]> {\n    const endPoint = `http://192.168.1.34:40080/WeatherForecast`; //TODO: just for test\n    return this.findAll(endPoint).pipe(\n      takeUntilDestroyed(this.destroyRef),\n      flatMap((item: any) => item),\n      map((data) => {\n        const responseMapper = new ResponseMapper(GetAllWeatherResponse);\n        return responseMapper.map(data);\n      })\n    );\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { VRTOErrorResponse, VRTORequest, VRTOResponse } from '@application/messages';\nimport { RequestMapper, ResponseMapper } from '@core/base';\nimport { IVRTOReadableRepository } from '@core/domain';\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { ReadableRepository } from '../readable.repository';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VRTOReadableRepository extends ReadableRepository implements IVRTOReadableRepository {\n  /**\n   * Retrieves a vato by making an HTTP request to refresh the access token.\n   *\n   * @param {VRTORequest} request - The request object containing the vrto\n   * @returns {Observable<VRTOResponse | VRTOErrorResponse>} An observable that emits either a VRTOResponse or a VRTOErrorResponse.\n   */\n  public getVATO(request: VRTORequest): Observable<VRTOResponse | VRTOErrorResponse> {\n    const endpoint = `${this._context.endPoint}/XFWToken/renew-access-token`;\n    const requestMapper = new RequestMapper(VRTORequest).map(request);\n    return this.findInAll(endpoint, requestMapper).pipe(\n      takeUntilDestroyed(this.destroyRef),\n      map((response) => new ResponseMapper(VRTOResponse).map(response)),\n      catchError((error: HttpErrorResponse) => of(new ResponseMapper(VRTOErrorResponse).map(error.error))),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { VerifyValidVATORequest, VerifyValidVATOResponse } from '@application/messages';\nimport { ResponseMapper } from '@core/base';\nimport { IVATOReadableRepository } from '@core/domain';\nimport { map, Observable } from 'rxjs';\nimport { ReadableRepository } from '../readable.repository';\n\n@Injectable({ providedIn: 'root' })\nexport class VATOReadableRepository extends ReadableRepository implements IVATOReadableRepository {\n  /**\n   * Verifies the VATO (Access Token) by sending a request to the specified endpoint.\n   *\n   * @param {VerifyValidVATORequest} request - The request object containing the necessary parameters for verification.\n   * @returns {Observable<VerifyValidVATOResponse>} - An observable that emits the response of the verification process.\n   *\n   */\n  public verifyVATO(request: VerifyValidVATORequest): Observable<VerifyValidVATOResponse> {\n    const endPoint = `${this._context.endPoint}/XFWToken/verify-access-token`;\n\n    return this.findAll(endPoint).pipe(\n      takeUntilDestroyed(this.destroyRef),\n      map((data: any) => new ResponseMapper(VerifyValidVATOResponse).map(data)),\n    );\n  }\n}\n","import { Context } from './context';\n\n/**\n * Defines ORBITMAIL_PORTAL Firebase Context\n * TO DO:\n */\nexport class ORBITMAIL_PORTALFirebaseContext implements Context {}\n","/*\n * Public API Surface of base\n */\n\nexport * from './lib/storages';\nexport * from './lib/readable.repository';\nexport * from './lib/readable.repository';\nexport * from './lib/repositories';\nexport * from './lib/orbitmail_portal.context';\nexport * from './lib/orbitmail_portal.firebase.context';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}