{"version":3,"file":"infrastructure-authorization.mjs","sources":["../../../../projects/infrastructure/authorization/src/lib/authorization.constant.ts","../../../../projects/infrastructure/authorization/src/lib/guards/authorization.guard.ts","../../../../projects/infrastructure/authorization/src/lib/interceptors/authorization-token.interceptor.ts","../../../../projects/infrastructure/authorization/src/public-api.ts","../../../../projects/infrastructure/authorization/src/infrastructure-authorization.ts"],"sourcesContent":["/**\n * A centralized class for storing all authorization-related storage keys.\n * Used to access localStorage or sessionStorage values consistently throughout the application.\n */\nexport class AuthorizationConstant {\n  /**\n   * VATO token used for authorizing API calls.\n   * Typically a short-lived access token.\n   */\n  public static readonly vato = 'vato';\n\n  /**\n   * VRTO token used for refreshing the VATO token when it expires.\n   * Typically a long-lived refresh token.\n   */\n  public static readonly vrto = 'vrto';\n\n  /**\n   * Contact ID (usually mapped to the current user's profile or business contact).\n   */\n  public static readonly contactId = 'pid';\n\n  /**\n   * User ID representing the authenticated user in the system.\n   */\n  public static readonly userId = 'uid';\n\n  /**\n   * Flag indicating whether the user chose \"Remember Me\" on login.\n   * Determines if token refresh should occur automatically.\n   */\n  public static readonly isRemember = 'is-remember';\n}\n","import { inject, Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport {\n  VerifyValidVATORequest,\n  VRTORequest,\n  VRTOResponse,\n} from '@application/messages';\nimport {\n  VerifyValidVATOQueryHandler,\n  VRTOQueryHandler,\n} from '@application/queries';\nimport { BROWSER_STORAGE } from '@infrastructure/base';\nimport { lastValueFrom } from 'rxjs';\nimport { AuthorizationConstant } from '../authorization.constant';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthorizationGuard implements CanActivate {\n  private readonly router = inject(Router);\n  private readonly storage = inject(BROWSER_STORAGE);\n  private readonly verifyValidVATOHandler = inject(VerifyValidVATOQueryHandler);\n  private readonly vrtoHandler = inject(VRTOQueryHandler);\n\n  /**\n   * Redirects the user to the sign-in page.\n   *\n   * @private\n   */\n  private redirectToSignIn(): boolean {\n    this.router.navigateByUrl('/sign-in');\n    return false;\n  }\n\n  /**\n   * Validates the existing VATO token and refreshes it if necessary.\n   *\n   * @private\n   * @param vrto The VRTO (refresh token) used to generate a new VATO token.\n   * @returns Promise<boolean> Whether the token was refreshed successfully.\n   */\n  private async validateAndRefreshToken(vrto: string): Promise<boolean> {\n    let isRemember =\n      this.storage.get(AuthorizationConstant.isRemember) === 'true';\n    if (!isRemember) {\n      // Remove authentication-related data to prevent auto-login\n      this.storage.remove(AuthorizationConstant.contactId);\n      this.storage.remove(AuthorizationConstant.vato);\n      this.storage.remove(AuthorizationConstant.vrto);\n      this.storage.remove(AuthorizationConstant.userId);\n      this.storage.remove(AuthorizationConstant.isRemember);\n      return false;\n    } else {\n      const request = new VRTORequest();\n      request.vrto = vrto;\n\n      try {\n        const tokenResponse = await lastValueFrom(\n          this.vrtoHandler.handle(request)\n        );\n        if (tokenResponse instanceof VRTOResponse) {\n          this.storage.set(AuthorizationConstant.vrto, tokenResponse.vrto);\n          this.storage.set(AuthorizationConstant.vato, tokenResponse.vato);\n          return true;\n        } else {\n          console.error(\n            AuthorizationGuard.name,\n            'Error refreshing token',\n            tokenResponse\n          );\n        }\n      } catch (error) {\n        console.error(\n          AuthorizationGuard.name,\n          'Error during token refresh',\n          error\n        );\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether the user is authorized to access a route.\n   *\n   * @param route The route being accessed.\n   * @param state The current router state.\n   * @returns Promise<boolean> Whether the route can be activated.\n   */\n  async canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Promise<boolean> {\n    const vato = this.storage.get(AuthorizationConstant.vato);\n    const vrto = this.storage.get(AuthorizationConstant.vrto);\n    if (!vrto || !vato) {\n      return this.redirectToSignIn();\n    }\n\n    try {\n      const isValidVATO = await lastValueFrom(\n        this.verifyValidVATOHandler.handle(new VerifyValidVATORequest())\n      );\n      // If the token is still valid, there is no need to call the refresh API.\n      if (isValidVATO.isValid) {\n        return true;\n      } else {\n        const refreshed = await this.validateAndRefreshToken(vrto);\n        if (refreshed) {\n          return true;\n        }\n      }\n    } catch (error) {\n      console.error(\n        AuthorizationGuard.name,\n        'Error validating VATO token',\n        error\n      );\n    }\n\n    return this.redirectToSignIn();\n  }\n}\n","import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpStatusCode,\n} from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { VRTORequest, VRTOResponse } from '@application/messages';\nimport { VRTOQueryHandler } from '@application/queries';\nimport { BROWSER_STORAGE } from '@infrastructure/base';\nimport {\n  BehaviorSubject,\n  catchError,\n  filter,\n  finalize,\n  Observable,\n  switchMap,\n  take,\n  throwError,\n} from 'rxjs';\nimport { AuthorizationConstant } from '../authorization.constant';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthorizationTokenInterceptor implements HttpInterceptor {\n  private readonly _storage = inject(BROWSER_STORAGE);\n  private readonly _vrtoQueryHandler = inject(VRTOQueryHandler);\n  private readonly _router = inject(Router);\n  private isRefreshing = false;\n  private refreshTokenSubject = new BehaviorSubject<string | null>(null);\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const vato = this._storage.get(AuthorizationConstant.vato);\n    const clonedRequest = vato ? this._addTokenHeader(req, vato) : req;\n\n    return next.handle(clonedRequest).pipe(\n      catchError((error) => {\n        if (\n          error instanceof HttpErrorResponse &&\n          this._isUnauthorized(error) &&\n          this._shouldIntercept(req)\n        ) {\n          return this._handleUnauthorized(req, next);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n\n  /**\n   * Checks if the HTTP response status indicates an unauthorized request.\n   *\n   * @param response - The HTTP error response to check.\n   * @returns `true` if the response status is 401 Unauthorized, otherwise `false`.\n   */\n  private _isUnauthorized(response: HttpErrorResponse): boolean {\n    return response.status === HttpStatusCode.Unauthorized;\n  }\n\n  /**\n   * Determines whether the HTTP request should be intercepted.\n   *\n   * @param req - The HTTP request to check.\n   * @returns `true` if the request should be intercepted, `false` otherwise.\n   */\n  private _shouldIntercept(req: HttpRequest<any>): boolean {\n    const blacklist = ['/User/sign-in', '/ORBITMAIL_PORTALToken/verify-access-token'];\n    return blacklist.every((path) => !req.url.includes(path));\n  }\n\n  /**\n   * Adds the Authorization header with the provided token to the given HTTP request.\n   *\n   * @param req - The original HTTP request.\n   * @param token - The token to be added in the Authorization header.\n   * @returns A cloned HTTP request with the Authorization header set.\n   */\n  private _addTokenHeader(\n    req: HttpRequest<any>,\n    token: string\n  ): HttpRequest<any> {\n    return req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });\n  }\n\n  /**\n   * Handles unauthorized HTTP requests by attempting to refresh the authentication token.\n   * If the token is successfully refreshed, the original request is retried with the new token.\n   * If the token cannot be refreshed, the user is redirected to the sign-in page.\n   *\n   * @private\n   * @param {HttpRequest<any>} req - The original HTTP request.\n   * @param {HttpHandler} next - The next interceptor in the chain.\n   * @returns {Observable<HttpEvent<any>>} An observable that emits the HTTP event.\n   */\n  private _handleUnauthorized(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.isRefreshing) {\n      this.isRefreshing = true;\n      this.refreshTokenSubject.next(null);\n\n      const vrto = this._storage.get(AuthorizationConstant.vrto);\n      if (!vrto) {\n        return this._redirectToSignIn();\n      }\n\n      const request = new VRTORequest();\n      request.vrto = vrto;\n      return this._vrtoQueryHandler.handle(request).pipe(\n        switchMap((response) => {\n          if (response instanceof VRTOResponse && response.vato) {\n            const vato = response.vato;\n            this._storage.set(AuthorizationConstant.vato, vato);\n            this.refreshTokenSubject.next(vato);\n            return next.handle(this._addTokenHeader(req, vato));\n          }\n          return this._redirectToSignIn();\n        }),\n        catchError(() => this._redirectToSignIn()),\n        finalize(() => (this.isRefreshing = false))\n      );\n    }\n\n    return this.refreshTokenSubject.pipe(\n      filter((token) => token !== null),\n      take(1),\n      switchMap((token) => next.handle(this._addTokenHeader(req, token!)))\n    );\n  }\n\n  /**\n   * Redirects the user to the sign-in page.\n   *\n   * @private\n   * @returns An observable that throws an error.\n   */\n  private _redirectToSignIn(): Observable<never> {\n    this._router.navigateByUrl('/sign-in');\n    return throwError(() => null);\n  }\n}\n","/*\n * Public API Surface of authorization\n */\nexport * from './lib/authorization.constant';\nexport * from './lib/guards';\nexport * from './lib/interceptors';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}