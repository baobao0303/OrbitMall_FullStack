{"version":3,"file":"application-queries.mjs","sources":["../../../../projects/application/queries/src/lib/weather/get-all.query.handler.ts","../../../../projects/application/queries/src/lib/vrto/vrto.query.handler.ts","../../../../projects/application/queries/src/lib/vato/verify-valid.vato.query.handler.ts","../../../../projects/application/queries/src/public-api.ts","../../../../projects/application/queries/src/application-queries.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport { RequestHandler } from '@application/base';\nimport {\n  GetAllWeatherRequest,\n  GetAllWeatherResponse,\n} from '@application/messages';\nimport { WeatherReadableRepository } from '@infrastructure/base';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class GetAllQueryHandler\n  implements RequestHandler<GetAllWeatherRequest, GetAllWeatherResponse[]>\n{\n  private repository = inject(WeatherReadableRepository);\n  handle(request: GetAllWeatherRequest): Observable<GetAllWeatherResponse[]> {\n    return this.repository.getAll();\n    // this.repository.getAll().subscribe({\n    //   next(value) {\n    //     console.log(value);\n    //   },\n    // });\n    // return undefined;\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { RequestHandler } from '@application/base';\nimport { VRTOErrorResponse, VRTORequest, VRTOResponse } from '@application/messages';\nimport { VRTOReadableRepository } from '@infrastructure/base';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VRTOQueryHandler implements RequestHandler<VRTORequest, VRTOResponse | VRTOErrorResponse> {\n  private readonly _vrtoReadableRepository = inject(VRTOReadableRepository);\n\n  /**\n   * Handles the VRTO request and returns an observable of either a VRTOResponse or a VRTOErrorResponse.\n   *\n   * @param {VRTORequest} request - The VRTO request object.\n   * @returns {Observable<VRTOResponse | VRTOErrorResponse>} An observable containing either a VRTOResponse or a VRTOErrorResponse.\n   */\n  public handle(request: VRTORequest): Observable<VRTOResponse | VRTOErrorResponse> {\n    const result = this._vrtoReadableRepository.getVATO(request);\n\n    return result;\n  }\n}\n","import { inject, Injectable } from '@angular/core';\nimport { RequestHandler } from '@application/base';\nimport { VerifyValidVATORequest, VerifyValidVATOResponse } from '@application/messages';\nimport { VATOReadableRepository } from '@infrastructure/base';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class VerifyValidVATOQueryHandler implements RequestHandler<VerifyValidVATORequest, VerifyValidVATOResponse> {\n  private readonly _vatoReadableRepository: VATOReadableRepository = inject(VATOReadableRepository);\n\n  /**\n   * Handles the verification of a VATO request.\n   *\n   * @param {VerifyValidVATORequest} request - The request object containing the details needed for verification.\n   * @returns {Observable<VerifyValidVATOResponse>} An observable that emits the verification response.\n   */\n  public handle(request: VerifyValidVATORequest): Observable<VerifyValidVATOResponse> {\n    const result = this._vatoReadableRepository.verifyVATO(request);\n\n    return result;\n  }\n}\n","/*\n * Public API Surface of queries\n */\n\nexport * from './lib/weather/get-all.query.handler';\nexport * from './lib/vrto';\nexport * from './lib/vato';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;MAUa,kBAAkB,CAAA;AAD/B,IAAA,WAAA,GAAA;AAIU,QAAA,IAAA,CAAA,UAAU,GAAG,MAAM,CAAC,yBAAyB,CAAC;AAUvD,IAAA;AATC,IAAA,MAAM,CAAC,OAA6B,EAAA;AAClC,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;;;;;;;IAOjC;+GAZW,kBAAkB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAlB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,kBAAkB,cADL,MAAM,EAAA,CAAA,CAAA;;4FACnB,kBAAkB,EAAA,UAAA,EAAA,CAAA;kBAD9B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCArB,gBAAgB,CAAA;AAH7B,IAAA,WAAA,GAAA;AAImB,QAAA,IAAA,CAAA,uBAAuB,GAAG,MAAM,CAAC,sBAAsB,CAAC;AAa1E,IAAA;AAXC;;;;;AAKG;AACI,IAAA,MAAM,CAAC,OAAoB,EAAA;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,OAAO,CAAC;AAE5D,QAAA,OAAO,MAAM;IACf;+GAbW,gBAAgB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAhB,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,gBAAgB,cAFf,MAAM,EAAA,CAAA,CAAA;;4FAEP,gBAAgB,EAAA,UAAA,EAAA,CAAA;kBAH5B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA;;;MCDY,2BAA2B,CAAA;AADxC,IAAA,WAAA,GAAA;AAEmB,QAAA,IAAA,CAAA,uBAAuB,GAA2B,MAAM,CAAC,sBAAsB,CAAC;AAalG,IAAA;AAXC;;;;;AAKG;AACI,IAAA,MAAM,CAAC,OAA+B,EAAA;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,OAAO,CAAC;AAE/D,QAAA,OAAO,MAAM;IACf;+GAbW,2BAA2B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAA3B,IAAA,SAAA,IAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,2BAA2B,cADd,MAAM,EAAA,CAAA,CAAA;;4FACnB,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBADvC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;ACNlC;;AAEG;;ACFH;;AAEG;;;;"}